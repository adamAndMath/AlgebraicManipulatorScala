import Numbers.Complex;
import Numbers.Integer;
import base.Add.add;
import base.Sub.sub;
import base.Mult.mult;
import base.Div.div;
import base.Pow.pow;
using base.Add;
using base.Sub;
using base.Mult;
using base.Div;
using base.Pow;

inductive fn sum(Integer -> Complex f, Integer a, Integer b) {
    base b = a => f(a)
    step add(b,1) => add(sum(f,a,b),f(add(b,1)))
}

work Single(Integer -> Complex f, Integer a) {
    let 2 sum(f,a,a)
    unwrap:1
} result {
    sum(f,a,a)=f(a)
}

work SuccRight(Integer -> Complex f, Integer a, Integer b) {
    let 2 sum(f,a,add(b,1))
    unwrap:1
} result {
    sum(f,a,add(b,1))=add(sum(f,a,b),f(add(b,1)))
}

induction PredLeft(Integer -> Complex f, Integer a, Integer b) {
    base b = a {
        let 2 sum(f,sub(a,1),a)
        substitute ~Sub.AddSub(-,1):1,2
        substitute SuccRight:1
        substitute Single:1,0
        substitute ~Single:1,1
    } b -> add(b,1) {
        call x add(x,f(add(b,1)))
        substitute Add.Associate:1
        substitute ~SuccRight:[0|1,1]
    } b -> sub(b,1) {
        substitute ~Sub.AddSub(-,1):[0|1,1],2
        substitute SuccRight:[0|1,1]
        substitute Sub.AddSub:[0|1,1],1,0
        substitute ~Add.Associate:1
        call x sub(x,f(b))
        substitute Sub.SubAdd:[0|1]
    }
} result {
    sum(f,sub(a,1),b)=add(f(sub(a,1)),sum(f,a,b))
}

work Identity(Integer -> Complex f, Integer a) {
    let 2 sum(f,a,sub(a,1))
    substitute ~Sub.SubAdd(-,f(a)):1
    substitute ~Sub.AddSub(-,1):1,0,1,0
    substitute ~SuccRight:1,0
    substitute Sub.AddSub:1,0,2
    substitute Single:1,0
    substitute Sub.Inverse:1
} result {
    sum(f,a,sub(a,1))=0
}

induction IndexShift<i>(Integer -> Complex f, Integer a, Integer b, Integer c) {
    base b = a {
        let 2 sum(f,a,a)
        substitute Single:1
        substitute ~Sub.SubAdd(-,c):1,0
        wrap i -> f(sub(i,c)):1
        substitute ~Single:1
    } b -> add(b,1) {
        call x add(x,f(add(b,1)))
        substitute ~Sub.SubAdd(-,c):1,1,0
        wrap i -> f(sub(i,c)):1,1
        substitute Add.Associate:1,1,0
        substitute Add.Commute:1,1,0,1
        substitute ~Add.Associate:1,1,0
        substitute ~SuccRight:[0|1]
        substitute Add.Associate:1,2
        substitute Add.Commute:1,2,1
        substitute ~Add.Associate:1,2
    }
} result {
    sum(f,a,b)=sum(i->f(sub(i,c)),add(a,c),add(b,c))
}

induction Reverse<i>(Integer -> Complex f, Integer a, Integer b) {
    base b=0 {
        let 2 sum(f,a,a)
        substitute Single:1
        substitute Sub.Negate:1,0
        wrap i -> f(sub(0,i)):1
        substitute ~Single:1
    } b -> add(b,1) {
        call x add(x,f(add(b,1)))
        substitute Add.Commute:1
        substitute ~SuccRight:0
        substitute Sub.Negate:1,0,0,0;
        substitute Sub.Commute2[2->3]:1,0,0
        wrap i -> f(sub(0,i)):1,0
        substitute ~PredLeft:1
        substitute Sub.Commute[0->2]:1,1
    } b -> sub(b,1){
        substitute ~Sub.AddSub(-,1):0,2
        substitute SuccRight:0;
        substitute ~Sub.SubAdd(-,1):1,1
        substitute PredLeft:1
        unwrap:1,0
        substitute Add.Commute:1;
        substitute Sub.AddSub:0,1,0
        substitute Sub.SubAdd:1,1,0,1
        substitute ~Sub.Negate(b):1,1,0;
        substitute Sub.Commute2[2->3]:1,0,1;
        call x sub(x,f(b));
        substitute Sub.SubAdd:[0|1];
    }
} result {
    sum(f,a,b)=sum(i -> f(sub(0,i)),sub(0,b),sub(0,a))
}

induction RangeSplit(Integer -> Complex f, Integer a, Integer b, Integer c) {
    base c=b {
        let 2 sum(f,a,b);
        substitute ~Add.IdentityRight:1;
        substitute ~Identity(f,add(b,1)):1,1;
        substitute Sub.SubAdd:1,1,2;
    } c -> add(c,1) {
        call x add(x,f(add(c,1)));
        substitute Add.Associate:1;
        substitute ~SuccRight:[0|1,1];
    } c -> sub(c,1){
        substitute ~Sub.AddSub(-,1):[0|1,1],2;
        substitute SuccRight:[0|1,1];
        substitute Sub.AddSub:[0|1,1],1,0;
        substitute ~Add.Associate:1;
        call x sub(x,f(c));
        substitute Sub.SubAdd:[0|1];
    }
} result {
    sum(f,a,c)=add(sum(f,a,b),sum(f,add(b,1),c))
}

induction Factor<i>(Integer -> Complex f, Complex c, Integer a, Integer b) {
    base b=a {
        let 2 sum(i -> mult(c,f(i)),a,a)
        substitute Single:0
        unwrap:0
        substitute ~Single:0,1
    } b -> add(b,1) {
        call x add(x,mult(c,f(add(b,1))))
        substitute ~Mult.Distribute:0
        wrap i -> mult(c,f(i)):1,1
        substitute ~SuccRight:[0,1|1]
    } b -> sub(b,1) {
        substitute ~Sub.AddSub(-,1):[0,1|1],2
        substitute SuccRight:[0,1|1]
        unwrap:1,1
        substitute Sub.AddSub:[0|1],1,1,0
        substitute Mult.Distribute:0
        call x sub(x,mult(c,f(b)))
        substitute Sub.SubAdd:[0|1]
    }
} result {
    mult(c,sum(f,a,b))=sum(i -> mult(c,f(i)),a,b)
}

induction Distribute<i>(Integer -> Complex f, Integer -> Complex g, Integer a, Integer b) {
    base b=a {
        let 2 add(f(a),g(a));
        wrap i -> add(f(i),g(i)):0
        substitute ~Single:[0|1,[0|1]];
    } b -> add(b,1) {
        call x add(x,add(f(add(b,1)),g(add(b,1))))

        substitute ~Add.Associate:1
        substitute Add.Associate:1,0
        substitute Add.Commute:1,0,1
        substitute ~Add.Associate:1,0
        substitute Add.Associate:1

        wrap i -> add(f(i),g(i)):0,1
        substitute ~SuccRight:[0|1,[0|1]]
    } b -> sub(b,1){
        substitute ~Sub.AddSub(-,1):[0|1,[0|1]],2
        substitute SuccRight:[0|1,[0|1]]
        unwrap:0,1
        substitute Sub.AddSub:[0,1,[0|1]|1,[0|1],1],0;

        substitute ~Add.Associate:1;
        substitute Add.Associate:1,0;
        substitute Add.Commute:1,0,1;
        substitute ~Add.Associate:1,0;
        substitute Add.Associate:1;

        call x sub(x,add(f(b),g(b)));
        substitute Sub.SubAdd:[0|1];
    }
} result {
    sum(i -> add(f(i),g(i)),a,b)=add(sum(f,a,b),sum(g,a,b))
}

induction Commute<i,j>((Integer,Integer) -> Complex f, Integer a1, Integer b1, Integer a2, Integer b2) {
    base b1=a1 {
        let 2 sum(j -> f(a1,j),a2,b2)
        wrap i -> sum(j -> f(i,j),a2,b2):0
        wrap i -> f(i,j):1,0,0
        substitute ~Single:[0|1,0,0]
    } b1 -> add(b1,1) {
        call x add(x,sum(j -> f(add(b1,1),j),a2,b2))
        substitute ~Distribute<j>:1
        unwrap:1,0,0,[0|1]
        wrap i -> sum(j -> f(i,j),a2,b2):0,1
        wrap i -> f(i,j):1,0,0,1
        substitute ~SuccRight:[0|1,0,0]
    } b1 -> sub(b1,1){
        substitute ~Sub.AddSub(-,1):[0|1,0,0],2
        substitute SuccRight:[0|1,0,0];
        substitute Sub.AddSub:[0|1,0,0],1,0
        unwrap:[0|1,0,0],1
        wrap j -> sum(i -> f(i,j),a1,sub(b1,1)):1,0,0,0
        wrap j -> f(b1,j):1,0,0,1
        substitute Distribute<j>:1;
        call x sub(x,sum(j -> f(b1,j),a2,b2));
        substitute Sub.SubAdd:[0|1];
    }
} result {
    sum(i -> sum(j -> f(i,j),a2,b2),a1,b1)=sum(j -> sum(i -> f(i,j),a1,b1),a2,b2)
}

induction TriangleCommute<i,j>((Integer,Integer) -> Complex f, Integer a, Integer n) {
    base n=a {
        let 2 f(a,a)
        wrap j -> f(a,j):0
        wrap i -> f(i,a):1
        substitute ~Single:[0|1]
        wrap i -> sum(j -> f(i,j),a,i):0
        wrap j -> sum(i -> f(i,j),j,a):1
        substitute ~Single:[0|1]
    } n -> add(n,1) {
        call x add(x,sum(j -> f(add(n,1),j),a,add(n,1)))
        wrap i -> sum(j -> f(i,j),a,i):0,1
        substitute ~SuccRight:0
        substitute SuccRight:1,1
        substitute ~Add.Associate:1
        substitute ~Distribute<j>:1,0
        unwrap:1,[0,0,0,[0|1]|1]
        wrap i -> f(i,j):1,0,0,0,1
        substitute ~SuccRight:1,0,0,0
        wrap i -> f(i,add(n,1)):1,1
        substitute ~Single:1,1;
        wrap j -> sum(i -> f(i,j),j,add(n,1)):1,1
        substitute ~SuccRight:1;
    } n -> sub(n,1){
        substitute ~Sub.AddSub(-,1):[0|1,0,0],2
        substitute SuccRight:[0|1,0,0]
        substitute Sub.AddSub:[0|1,0,0],1,0
        unwrap:[0|1,0,0],1
        wrap j -> sum(i -> f(i,j),j,sub(n,1)):1,0,0,0
        wrap j -> f(n,j):1,0,0,1
        substitute Distribute<j>:1;
        substitute ~Sub.AddSub(-,1):1,0,2
        substitute SuccRight:1,0;
        substitute Sub.AddSub:1,0,1,0
        unwrap:1,0,1
        substitute Identity:1,0,1;
        substitute Add.IdentityRight:1,0;

        call x sub(x,sum(j -> f(n,j),a,n));
        substitute Sub.SubAdd:[0|1];
    }
} result {
    sum(i -> sum(j -> f(i,j),a,i),a,n)=sum(j -> sum(i -> f(i,j),j,n),a,n)
}