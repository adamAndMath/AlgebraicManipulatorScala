import Properties
import Numbers
import Add

assume fn sub(Complex, Complex)

assume prop InverseRight(add,sub)

assume prop InverseRight(sub,add)

prove prop IdentityRight(sub,0)(Complex a) {
    let 2 sub(a,0);
    substitute ~IdentityRight(add,-):1,0;
    substitute InverseRight(sub,add)(-,0):1;
}

prove prop Matching(sub,0)(Complex a) {
    let 2 0;
    substitute ~InverseRight(sub,add)(-,a):0;
    substitute IdentityLeft:0,0;
}

prove prop AsRight(sub,add,0)(Complex a, Complex b) {
    let 2 sub(a,b);
    substitute ~IdentityRight(add,-):1,0;
    substitute ~InverseRight(add,sub)(-,b):1,0,1;
    substitute ~Associate:1,0;
    substitute InverseRight:1;
}

prove prop OuterCommuteRight(sub,sub) (Complex a, Complex b, Complex c) {
    let 2 sub(sub(a,b),c)
    substitute AsRight:1
    substitute AsRight:1,0
    substitute OuterCommuteRight:1
    substitute ~AsRight:1,0
    substitute ~AsRight:1
}

prove prop OuterCommuteRight(add,sub) (Complex a, Complex b, Complex c) {
    let 2 add(sub(a,b),c)
    substitute AsRight:1,0
    substitute OuterCommuteRight:1
    substitute ~AsRight:1
}

prove prop AssociateMut(sub,sub,sub,add) (Complex a, Complex b, Complex c) {
    let 2 sub(sub(a,b),c)
    substitute ~InverseRight(add,sub)(-,add(b,c)):1,0,0
    substitute Commute:1,0,0,1
    substitute ~Associate:1,0,0
    substitute InverseRight:1,0
    substitute InverseRight:1
}

prove prop AssociateMut(sub,add,add,sub) (Complex a, Complex b, Complex c) {
    let 2 sub(add(a,b),c)
    substitute AsRight:1
    substitute Associate:1
    substitute ~AsRight:1,1
}

prove prop AssociateMut(add,sub,sub,sub) (Complex a, Complex b, Complex c) {
    let 2 add(sub(a,b),c)
    substitute ~InverseRight(add,sub)(-,c):1,0,1
    substitute ~AssociateMut:1,0
    substitute InverseRight:1
}

prove prop NegateLeft(sub,0)(Complex a) {
    let 2 sub(0,sub(0,a))
    substitute ~AssociateMut:1
    substitute Matching:1,0
    substitute IdentityLeft:1
}