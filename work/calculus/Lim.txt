import Numbers;
import base.Div;
import Infinity;

assume fn lim(Complex, Complex -> Complex)

assume ide Div<x>(a: Complex)
    lim(a, x -> div(x,x)) = 1;

assume ide Resolve(a: Complex, f: Complex -> Complex)
    lim(a, f) = f(a);

assume ide Func<x>(a: Complex, f: Complex -> Complex, g: Complex -> Complex)
    lim(a, x -> f(g(x))) = f(lim(a, g)) = lim(g(a), f);

assume ide Func2<x>(a: Complex, f: (Complex, Complex) -> Complex, g: Complex -> Complex, h: Complex -> Complex)
    lim(a, x -> f(g(x), h(x))) = f(lim(a, g), lim(a, h));

assume ide Reciprocal<x>
    lim(inf, x -> div(1, x)) = 0;
