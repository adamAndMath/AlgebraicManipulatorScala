assume Mult1(Complex a, Complex b)
    a=div(mult(a,b),b)=mult(div(a,b),b);

work Identity(Complex a) {
    let 2 a;
    substitute Mult1[0->2](-,1):1;
    substitute Mult.Identity[1->0]:1;
} result {
    a=div(a,1)
}

work Inverse(Complex a) {
    let 2 1;
    substitute Mult1[0->1](-,a):0;
    substitute Mult.Identity[2->0]:0,0;
} result {
    div(a,a)=1
}

work Mult2(Complex a, Complex b) {
    let 2 div(a,b);
    substitute Mult.Identity[0->1]:1,0;
    substitute Mult1[0->2](-,b):1,0,1;
    substitute Mult.Associate[1->0]:1,0;
    substitute Mult1[1->0]:1;
} result {
    div(a,b)=mult(a,div(1,b))
}

work Commute(Complex a, Complex b, Complex c) {
    let 3 div(div(a,b),c);
    substitute Mult2[0->1]:1;
    substitute Mult2[0->1]:1,0;
    substitute Mult.Associate[0->1]:1;
    substitute Mult.Commute[0->1]:1,1;
    substitute Mult.Associate[1->0]:1;
    substitute Mult2[1->0]:1,0;
    substitute Mult2[1->0]:1;

    substitute Mult1[0->2](-,mult(b,c)):2,0,0;
    substitute Mult.Commute[0->1]:2,0,0,1;
    substitute Mult.Associate[1->0]:2,0,0;
    substitute Mult1[1->0]:2,0;
    substitute Mult1[1->0]:2;
} result {
    div(div(a,b),c)=div(div(a,c),b)=div(a,mult(b,c))
}

work Commute2(Complex a, Complex b, Complex c) {
    let 4 div(mult(a,b),c);
    substitute Mult2[0->1]:[1|2|3];
    substitute Mult.Associate[0->1]:[1|2|3];
    substitute Mult.Commute[0->1]:[2,1|3,1];
    substitute Mult.Associate[1->0]:[2|3];
    substitute Mult2[1->0]:[1,1|2,0|3,0];

    substitute Mult1[0->2](-,b):3,0,1;
    substitute Commute[2->0]:3,0;
    substitute Mult1[2->0](-,b):3;
} result {
    div(mult(a,b),c)=mult(a,div(b,c))=mult(div(a,c),b)=div(a,div(c,b))
}

work Distribute(Complex f, Complex a, Complex b) {
    let 2 div(add(a,b),f);
    substitute Mult2[0->1]:1;
    substitute Mult.Commute[0->1]:1;
    substitute Mult.Distribute[0->1]:1;
    substitute Mult.Commute[1->0]:1,[0|1];
    substitute Mult2[1->0]:1,[0|1];
} result {
    div(add(a,b),f)=add(div(a,f),div(b,f))
}

work DistributeSub(Complex f, Complex a, Complex b) {
    let 2 sub(div(a,f),div(b,f));
    substitute Sub.Add1[0->2](-,b):0,0,0;
    substitute Distribute[0->1]:0,0;
    substitute Sub.Add1[1->0]:0;
} result {
    div(sub(a,b),f)=sub(div(a,f),div(b,f))
}

work Singularity(Complex a) {
    let 2 div(sub(1,1),a);
    substitute DistributeSub[0->1]:0;
    substitute Sub.Inverse[0->1]:[0|1,0];

} result {
    0=div(0,a)
}