import Properties
import Numbers
import Add
import Sub
import Mult

assume fn div(Complex, Complex)

assume prop InverseRight(mult, div)

assume prop InverseRight(div, mult)

prove prop IdentityRight(div, 1)(Complex a) {
    let 2 div(a,1);
    substitute ~IdentityRight(mult,1):1;
    substitute InverseRight(mult,div)(-,1):1;
}

prove prop Matching(div, 1)(Complex a) {
    let 2 div(a,a);
    substitute ~IdentityLeft(mult,1):1,0;
    substitute InverseRight(div,mult)(-,a):1;
}

prove prop AsRight(div, mult, 1)(Complex a, Complex b) {
    let 2 div(a,b);
    substitute ~IdentityRight(mult,-):1,0;
    substitute ~InverseRight(mult,div)(-,b):1,0,1;
    substitute ~Associate:1,0;
    substitute InverseRight:1;
}

prove prop OuterCommuteRight(div,div) (Complex a, Complex b, Complex c) {
    let 2 div(div(a,b),c)
    substitute AsRight:1
    substitute AsRight:1,0
    substitute OuterCommuteRight:1
    substitute ~AsRight:1,0
    substitute ~AsRight:1
}

prove prop OuterCommuteRight(mult,div) (Complex a, Complex b, Complex c) {
    let 2 mult(div(a,b),c)
    substitute AsRight:1,0
    substitute OuterCommuteRight:1
    substitute ~AsRight:1
}

prove prop AssociateMut(div,div,div,mult) (Complex a, Complex b, Complex c) {
    let 2 div(div(a,b),c)
    substitute ~InverseRight(mult,div)(-,mult(b,c)):1,0,0
    substitute Commute:1,0,0,1
    substitute ~Associate:1,0,0
    substitute InverseRight:1,0
    substitute InverseRight:1
}

prove prop AssociateMut(div,mult,mult,div) (Complex a, Complex b, Complex c) {
    let 2 div(mult(a,b),c)
    substitute Commute:1,0
    substitute ~OuterCommuteRight:1
    substitute Commute:1
}

prove prop AssociateMut(mult,div,div,div) (Complex a, Complex b, Complex c) {
    let 2 mult(div(a,b),c)
    substitute ~InverseRight(mult,div)(-,c):1,0,1
    substitute ~AssociateMut:1,0
    substitute InverseRight:1
}

prove ide MultFrac(Complex a, Complex b, Complex c, Complex d) {
    let 2 mult(div(a,c),div(b,d))
    substitute ~AssociateMut:1
    substitute OuterCommuteRight:1,0
    substitute AssociateMut:1
} result {
    mult(div(a,c),div(b,d))=div(mult(a,b),mult(c,d))
}

prove prop DistributeRight(div,add)(Complex a, Complex b, Complex f) {
    let 2 div(add(a,b),f)
    substitute AsRight:1
    substitute DistributeRight:1
    substitute ~AsRight:1,[0|1]
}

prove prop DistributeRight(div,sub)(Complex a, Complex b, Complex f) {
    let 2 div(sub(a,b),f)
    substitute AsRight:1
    substitute DistributeRight:1
    substitute ~AsRight:1,[0|1]
}

prove prop NegateLeft(div,1)(Complex a) {
    let 2 div(1,div(1,a))
    substitute ~AssociateMut:1
    substitute Matching:1,0
    substitute IdentityLeft:1
}

prove prop AnnihilatorLeft(div,0)(Complex a) {
    let 2 div(sub(1,1),a)
    substitute DistributeRight:1;
    substitute Matching:[0,0|1]
}