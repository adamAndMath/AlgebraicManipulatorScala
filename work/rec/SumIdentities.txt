import Numbers.Complex;
import Numbers.Integer;
import base.Add.add;
import base.Sub.sub;
import base.Mult.mult;
import base.Div.div;
import base.Pow.pow;
import rec.Sum.sum
using base.Add;
using base.Sub;
using base.Mult;
using base.Div;
using base.Pow;

work GeometricSum<i>(Complex a, Integer n) {
    let 2 sum(i -> pow(a,i),0,n)
    substitute ~Sub.AddSub(-,1):1,0,0,1
    substitute Add.Commute:1,0,0,1
    substitute Pow.Definition:1,0,0
    wrap i -> pow(a,sub(i,1)):1,0,0,1
    substitute ~Sum.Factor:1
    substitute ~Sub.AddSub(-,1):1,1,[1|2]
    wrap i -> pow(a,i):1,1,0,0
    substitute ~Sum.IndexShift:1,1
    substitute Sum.PredLeft:1,1
    unwrap:1,1,0
    substitute Mult.Distribute:1
    substitute ~Pow.Definition:1,0
    substitute ~Sub.AsAdd:1,0,1
    substitute Sub.Inverse:1,0,1
    substitute Pow.Singularity:1,0
    substitute ~Sub.SubAdd(-,pow(a,n)):1,1,1
    substitute ~Sub.AddSub(-,1):1,1,1,0,1,1
    wrap i -> pow(a,i):1,1,1,0,1
    substitute ~Sum.SuccRight:1,1,1,0
    substitute Sub.AddSub:1,1,1,0,2
    substitute Mult.DistributeSub:1,1;
    substitute Pow.Identity:1,1,0,0;
    substitute ~Pow.Definition:1,1,1;
    substitute Add.Commute:1,1,1,1;
    substitute Sub.Commute2[1->2]:1;
    call x sub(x,mult(a,sum(i -> pow(a,i),0,n)));
    substitute Sub.SubAdd:1;
    substitute Mult.Commute:0,1;
    substitute ~Mult.IdentityRight:0,0;
    substitute ~Mult.DistributeSub:0;
    call x div(x,sub(1,a));
    substitute Div.DivMult:0;
} result {
    sum(i -> pow(a,i),0,n)=div(sub(1,pow(a,add(n,1))),sub(1,a))
}