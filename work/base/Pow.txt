import Properties
import Numbers
import Add
import Sub
import Mult
import Div

assume fn pow(Complex, Complex)

assume prop DistributeMutLeft(pow,add,mult)

assume prop DistributeRight(pow,mult)

assume prop IdentityRight(pow,1)

assume prop AssociateMut(pow,pow,pow,mult)//[a>0]

prove prop DistributeMutLeft(pow,sub,div)(Complex n, Complex m, Complex a) {
    let 2 div(pow(a,n),pow(a,m))
    substitute ~InverseRight(add,sub)(-,m):0,0,1
    substitute DistributeMutLeft:0,0
    substitute InverseRight:0
}

prove prop SingularityRight(pow,0,1)(Complex a) {
    let 2 pow(a,0);
    substitute ~Matching(sub,-)(1):1,1;
    substitute DistributeMutLeft:1;
    substitute Matching:1;
}

prove prop AnnihilatorLeft(pow,0)(Complex a) {
    let 2 pow(0,a);
    substitute ~InverseRight(add,sub)(-,1):1,1;
    substitute DistributeMutLeft:1;
    substitute IdentityRight:1,1;
    substitute AnnihilatorRight:1;
}

inductive prop AssociateMut(pow,pow,pow,mult)(Complex a, Complex n, Integer m) {
    base m=1 {
        let 2 pow(a,n)
        substitute ~IdentityRight(pow,-):0
        substitute ~IdentityRight(mult,-):1,1
    } m -> add(m,1) {
        call x mult(x,pow(a,n))
        substitute ~IdentityRight(pow,-):0,1
        substitute ~DistributeMutLeft:[0|1]
        substitute ~IdentityRight(mult,-):1,1,1
        substitute ~DistributeLeft:1,1
    } m -> sub(m,1) {
        call x div(x,pow(a,n))
        substitute ~IdentityRight(pow,-):0,1
        substitute ~DistributeMutLeft:[0|1]
        substitute ~IdentityRight(mult,-):1,1,1
        substitute ~DistributeLeft:1,1
    }
}