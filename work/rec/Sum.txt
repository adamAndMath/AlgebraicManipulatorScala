import Numbers;
using base.Add;
using base.Sub;
using base.Mult;
using base.Div;

assume Sum<i,r>((Integer,Complex) -> Complex f, Integer a, Integer b)
    sum<i>(eval(f,i),a,b)=rec<i,r>(add(r,eval(f,sub(add(i,a),1))),0,add(sub(b,a),1));

work Identity<i>(Integer -> Complex f, Integer a) {
    let 2 sum<i>(eval(f,i),a,sub(a,1));
    substitute Sum<i,r>:1;
    toeval(j:[1,1,0,0],q:[0]):1,0;
    substitute Sub.Commute2[2->0]:1,2;
    substitute Sub.Add1[2->0]:1,2,0;
    substitute Sub.Inverse:1,2;
    substitute Rec.Identity<i,r>:1;
} result {
    sum<i>(eval(f,i),a,sub(a,1))=0
}

work Rec<i>(Integer -> Complex f, Integer a, Integer b) {
    let 2 sum<i>(eval(f,i),a,b);
    substitute Sum[0->1]<i,r>:1;
    toeval(j:[1,1,0,0],q:[0]):1,0;
    substitute Rec.Rec<i,r>:1;
    fromeval:1,2,0;
    fromeval:1;
    substitute Sub.Commute2[2->0]:1,1,1,0,0;
    substitute Sub.Add1[2->0]:1,1,1,0;
    substitute Sub.Add1[1->0]:1,1,1;
    substitute Sub.Add1[1->2]:1,0,2;
    substitute Sub.Commute[0->1]:1,0,2,0;
    substitute ~Sum<i,r>:1,0;
} result {
    sum<i>(eval(f,i),a,b)=add(sum<i>(eval(f,i),a,sub(b,1)),eval(f,b))
}

work Single<i>(Integer -> Complex f, Integer a) {
    let 2 sum<i>(eval(f,i),a,a);
    substitute Rec<i>:1;
    substitute Identity<i>:1,0;
    substitute Add.Identity[2->0]:1;
} result {
    sum<i>(eval(f,i),a,a)=eval(f,a)
}

induction Rec2<i>(Integer -> Complex f, Integer a, Integer b) {
    base b=a {
        let 2 sum<i>(eval(f,i),a,a);
        substitute Rec<i>:1;
        substitute Identity<i>:1,0;
        substitute Add.Commute:1;
        substitute ~Identity<i>(f,add(a,1)):1,1;
        substitute Sub.Add1[1->0]:1,1,2;
    } b -> add(b,1) {
        substitute Sub.Add1[0->1](-,1):[0,2|1,1,2];
        call x add(x,eval(f,add(b,1)));
        substitute Add.Associate:1;
        substitute Rec[1->0]<i>:[0|1,1];
    } b -> sub(b,1){
        substitute Rec[0->1]<i>:[0|1,1];
        substitute ~Add.Associate:1;
        call x sub(x,eval(f,b));
        substitute Sub.Add1[1->0]:[0|1];
    }
} result {
    sum<i>(eval(f,i),a,b)=add(eval(f,a),sum<i>(eval(f,i),add(a,1),b))
}

work IndexShift<i>(Integer -> Complex f, Integer a, Integer b, Integer c) {
    let 2 sum<i>(eval(f,i),a,b);
    substitute Sum<i,r>:1;
    substitute Sub.Add1[0->1](-,c):1,[2,0,0|0,1,1];
    substitute Sub.Commute[1->2]:1,2,0;
    substitute Sub.Commute2[2->0]:1,0,1,1,0;
    substitute Add.Associate:1,0,1,1,0,0;
    toeval(j:[1,0]):1,0,1;
    substitute Sum[1->0]<i,r>:1;
    fromeval:1,0;
} result {
    sum<i>(eval(f,i),a,b)=sum<i>(eval(f,sub(i,c)),add(a,c),add(b,c))
}

induction Reverse<i>(Integer -> Complex f, Integer a, Integer b) {
    base a=0,b=0 {
        let 2 sum<i>(eval(f,i),0,0);
        substitute Single<i>:1;
        substitute ~Sub.Inverse(0):1,1;
        substitute ~Sub.Inverse(0):1,1,1;
        toeval(j:[1,1]):1;
        substitute ~Single<i>:1;
        fromeval:1,0;
    } a -> add(a,1) {
        substitute Rec2<i>:0;
        substitute Add.Commute:0;
        toeval(j:[1,1]):1,0;
        substitute Rec<i>:1;
        fromeval:1,0,0;
        fromeval:1,1;
        substitute Sub.Negate[1->0](a):1,1,1;
        substitute Sub.Commute[0->2]:1,0,2;
        call x sub(x,eval(f,a));
        substitute Sub.Add1[1->0]:[0|1];
    } a -> sub(a,1){
        substitute Sub.Add1[0->2](-,1):[0,1|1,2,1];
        substitute Sub.Commute[2->0]:1,2;
        call x add(x,eval(f,sub(a,1)));
        substitute Add.Commute:0;
        substitute Rec2[1->0]<i>:0;
        substitute Sub.Negate:1,1,1;
        toeval(j:[1,1]):1,[0,0|1];
        substitute ~Rec<i>:1;
        fromeval:1,0;
    } b -> add(b,1) {
        substitute Sub.Add1[0->1](-,1):[0,2|1,1,1];
        substitute Sub.Commute2[3->2]:1,1;
        call x add(x,eval(f,add(b,1)));
        substitute Add.Commute:1;
        substitute ~Rec<i>:0;
        substitute Sub.Negate:1,0,1;
        toeval(j:[1,1]):1,[1,0|0];
        substitute ~Rec2<i>:1;
        fromeval:1,0;
    } b -> sub(b,1){
        substitute Rec<i>:0;
        toeval(j:[1,1]):1,0;
        substitute Rec2<i>:1;
        fromeval:1,[0|1,0];
        substitute Add.Commute:1;
        substitute ~Sub.Negate(b):1,1,1;
        substitute Sub.Commute2[2->3]:1,0,1;
        call x sub(x,eval(f,b));
        substitute Sub.Add1[1->0]:[0|1];
    }
} result {
    sum<i>(eval(f,i),a,b)=sum<i>(eval(f,sub(0,i)),sub(0,b),sub(0,a))
}

induction RangeSplit<i,j>(Integer -> Complex f, Integer a, Integer b, Integer c) {
    base c=b {
        let 2 sum<i>(eval(f,i),a,b);
        substitute Add.Identity[0->1]:1;
        substitute ~Identity<j>(f,add(b,1)):1,1;
        substitute Sub.Add1[1->0]:1,1,2;
    } c -> add(c,1) {
        call x add(x,eval(f,add(c,1)));
        substitute Add.Associate:1;
        substitute Sub.Add1[0->1](-,1):[0,0,2|1,1,0,2];
        substitute ~Rec<i>:0;
        substitute ~Rec<j>:1,1;
    } c -> sub(c,1){
        substitute Rec<i>:0;
        substitute Rec<j>:1,1;
        substitute ~Add.Associate:1;
        call x sub(x,eval(f,c));
        substitute Sub.Add1[1->0]:[0|1];
    }
} result {
    sum<i>(eval(f,i),a,c)=add(sum<i>(eval(f,i),a,b),sum<j>(eval(f,j),add(b,1),c))
}

induction Factor<i>(Integer -> Complex f, Complex c, Integer a, Integer b) {
    base b=sub(a,1) {
        let 2 0;
        substitute Mult.Singularity[0->2](c):0;
        substitute ~Identity<i>(f,a):0,1;
        substitute ~Identity<i>(func<k>(mult(c,eval(f,k))),a):1;
        fromeval:1,0;
    } b -> add(b,1) {
        call x add(x,mult(c,eval(f,add(b,1))));
        substitute ~Mult.Distribute:0;
        substitute Sub.Add1[0->1](-,1):[0,1,0,2|1,0,2];
        toeval(k:[1,1]):1,[0,0|1];
        substitute ~Rec<i>:[0,1|1];
        fromeval:1,0;
    } b -> sub(b,1){
        toeval(k:[1,1]):1,0;
        substitute Rec<i>:[0,1|1];
        fromeval:1,[0,0|1];
        substitute Mult.Distribute:0;
        call x sub(x,mult(c,eval(f,b)));
        substitute Sub.Add1[1->0]:[0|1];
    }
} result {
    mult(c,sum<i>(eval(f,i),a,b))=sum<i>(mult(c,eval(f,i)),a,b)
}

induction Distribute<i,j>(Integer -> Complex f, Integer -> Complex g, Integer a, Integer b) {
    base b=a {
        let 2 add(eval(f,a),eval(g,a));
        toeval(k:[0,1|1,1]):0;
        substitute ~Single<i>:0;
        fromeval:0,0;
        substitute ~Single<i>:1,0;
        substitute ~Single<j>:1,1;
    } b -> add(b,1) {
        call x add(x,add(eval(f,add(b,1)),eval(g,add(b,1))));

        substitute ~Add.Associate:1;
        substitute Add.Associate:1,0;
        substitute Add.Commute:1,0,1;
        substitute ~Add.Associate:1,0;
        substitute Add.Associate:1;

        substitute Sub.Add1[0->1](-,1):[0,0,2|1,0,0,2|1,1,0,2];

        toeval(k:[0,1|1,1]):0,[0,0|1];
        substitute ~Rec<i>:[0|1,0];
        substitute ~Rec<j>:1,1;
        fromeval:0,0;
    } b -> sub(b,1){
        toeval(k:[0,1|1,1]):0,0;

        substitute Rec<i>:[0|1,0];
        substitute Rec<j>:1,1;

        fromeval:0,[0,0|1];

        substitute ~Add.Associate:1;
        substitute Add.Associate:1,0;
        substitute Add.Commute:1,0,1;
        substitute ~Add.Associate:1,0;
        substitute Add.Associate:1;

        call x sub(x,add(eval(f,b),eval(g,b)));
        substitute Sub.Add1[1->0]:[0|1];
    }
} result {
    sum<i>(add(eval(f,i),eval(g,i)),a,b)=add(sum<i>(eval(f,i),a,b),sum<j>(eval(g,j),a,b))
}

induction Commute<i,j>((Integer,Integer) -> Complex f, Integer a1, Integer b1, Integer a2, Integer b2) {
    base b1=a1, b2=a2 {
        let 2 eval(f,a1,a2);
        toeval(a:[1]):[0|1];
        substitute ~Single<i>:[0|1];
        fromeval:[0,0|1,0];
        toeval(a:[2]):0,0;
        toeval(a:[0,2]):1;
        substitute ~Single<j>:[0,0|1];
        fromeval:[0,0,0|1,0];
    } b1 -> add(b1,1) {
        call x add(x,sum<j>(eval(f,add(b1,1),j),a2,b2));
        toeval(k:[0,2]):1,0,0;
        toeval(k:[2]):1,1,0;
        substitute ~Distribute<j,j>:1;
        fromeval:1,0,[0|1];

        substitute Sub.Add1[0->1](-,1):[0,0,2|1,0,0,2];
        toeval(k:[0,1]):0,[0,0|1];
        toeval(k:[1]):1,0,[0,0|1];
        substitute ~Rec<i>:[0|1,0];
        fromeval:[0,0|1,0,0];
    } b1 -> sub(b1,1){
        toeval(k:[0,1]):0,0;
        toeval(k:[1]):1,0,0;
        substitute Rec<i>:[0|1,0];
        fromeval:[0,[0,0|1]|1,0,[0,0|1]];

        toeval(k:[0,2]):1,0,0;
        toeval(k:[2]):1,0,1;
        substitute Distribute<j,j>:1;
        fromeval:1,[0,0|1,0];

        call x sub(x,sum<j>(eval(f,b1,j),a2,b2));
        substitute Sub.Add1[1->0]:[0|1];
    } b2 -> add(b2,1) {
        call x add(x,sum<i>(eval(f,i,add(b2,1)),a1,b1));
        toeval(k:[0,1]):0,0,0;
        toeval(k:[1]):0,1,0;
        substitute ~Distribute<i,i>:0;
        fromeval:0,0,[0|1];

        substitute Sub.Add1[0->1](-,1):[0,0,0,2|1,0,2];
        toeval(k:[2]):0,0,[0,0|1];
        toeval(k:[0,2]):1,[0,0|1];
        substitute ~Rec<j>:[0,0|1];
        fromeval:[0,0,0|1,0];
    } b2 -> sub(b2,1){
        toeval(k:[2]):0,0,0;
        toeval(k:[0,2]):1,0;
        substitute Rec<j>:[0,0|1];
        fromeval:[0,0,[0,0|1]|1,[0,0|1]];

        toeval(k:[0,1]):0,0,0;
        toeval(k:[1]):0,0,1;
        substitute Distribute<i,i>:0;
        fromeval:0,[0,0|1,0];

        call x sub(x,sum<i>(eval(f,i,b2),a1,b1));
        substitute Sub.Add1[1->0]:[0|1];
    }
} result {
    sum<i>(sum<j>(eval(f,i,j),a2,b2),a1,b1)=sum<j>(sum<i>(eval(f,i,j),a1,b1),a2,b2)
}

induction TriangleCommute<i,j>((Integer,Integer) -> Complex f, Integer a, Integer n) {
    base n=a {
        let 2 eval(f,a,a);
        toeval(k:[2]):0;
        substitute ~Single<j>:0;
        fromeval:0,0;
        toeval(k:[0,1|2]):0;
        substitute ~Single<i>:0;
        fromeval:0,0;
        toeval(k:[1]):1;
        substitute ~Single<i>:1;
        fromeval:1,0;
        toeval(k:[0,2|1]):1;
        substitute ~Single<j>:1;
        fromeval:1,0;
    } n -> add(n,1) {
        call x add(x,sum<j>(eval(f,add(n,1),j),a,add(n,1)));
        substitute Sub.Add1[0->1](-,1):0,0,2;
        toeval(k:[0,1|2]):0,[0,0|1];
        substitute ~Rec<i>:0;
        fromeval:0,0;
        toeval(k:[2]):1,1,0;
        substitute Rec<j>:1,1;
        fromeval:1,1,[0,0|1];
        substitute Sub.Add1[1->0]:1,1,0,2;
        substitute ~Add.Associate:1;
        toeval(k:[0,2|1]):1,0,0,0;
        toeval(k:[2]):1,0,1,0;
        substitute ~Distribute<j,j>:1,0;
        fromeval:1,0,0,[0|1];
        substitute Sub.Add1[0->1](-,1):1,0,0,0,2;
        substitute Sub.Add1[0->1](-,1):1,0,2;
        toeval(k:[1]):1,0,0,[0,0|1];
        substitute ~Rec<i>:1,0,0;
        fromeval:1,0,0,0;
        toeval(k:[1]):1,1;
        substitute ~Single<i>:1,1;
        fromeval:1,1,0;
        toeval(k:[0,2|1]):1,[0,0|1];
        substitute ~Rec<j>:1;
        fromeval:1,0;
    } n -> sub(n,1){
        toeval(k:[0,1|2]):0,0;
        substitute Rec<i>:0;
        fromeval:0,[0,0|1];

        toeval(k:[1]):1,0,0;
        substitute Rec<i>:1,0;
        fromeval:1,0,[0,0|1];
        toeval(k:[0,2|1]):1,0,0;
        toeval(k:[2]):1,0,1;
        substitute Distribute<j,j>:1;
        substitute Rec<j>:1,0;
        fromeval:1,[0,[0,0|1]|1,0];
        toeval(k:[1]):1,0,1,0;
        substitute Identity<i>:1,0,1;
        substitute Add.Identity[1->0]:1,0;

        call x sub(x,sum<j>(eval(f,n,j),a,n));
        substitute Sub.Add1[1->0]:[0|1];
    }
} result {
    sum<i>(sum<j>(eval(f,i,j),a,i),a,n)=sum<j>(sum<i>(eval(f,i,j),j,n),a,n)
}