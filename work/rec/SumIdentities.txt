import Properties
import Numbers
import base.Add
import base.Sub
import base.Mult
import base.Div
import base.Pow
using Sum.sum

prove ide GeometricSum<i>(Complex a, Integer n) {
    let 2 sum(i -> pow(a,i),0,n)
    substitute ~InverseRight(add,sub)(-,1):1,0,0,1
    substitute Commute:1,0,0,1
    substitute DistributeMutLeft:1,0,0
    wrap i -> pow(a,sub(i,1)):1,0,0,1
    substitute ~Sum.Factor:1
    wrap i -> pow(a,i):1,1,0,0
    substitute Sum.IndexShiftSub:1,1
    substitute Sum.PredLeft:1,1
    unwrap:1,1,0
    substitute DistributeLeft:1
    substitute ~DistributeMutLeft:1,0
    substitute ~AsRight:1,0,1
    substitute Matching:1,0,1
    substitute SingularityRight:1,0
    substitute ~InverseRight(sub,add)(-,pow(a,n)):1,1,1
    substitute ~InverseRight(add,sub)(-,1):1,1,1,0,1,1
    wrap i -> pow(a,i):1,1,1,0,1
    substitute ~Sum.SuccRight:1,1,1,0
    substitute InverseRight:1,1,1,0,2
    substitute DistributeLeft:1,1;
    substitute IdentityRight:1,1,0,0;
    substitute ~DistributeMutLeft:1,1,1;
    substitute Commute:1,1,1,1;
    substitute ~AssociateMut:1;
    substitute ~OuterCommuteRight:1;
    call x sub(x,mult(a,sum(i -> pow(a,i),0,n)));
    substitute InverseRight:1;
    substitute Commute:0,1;
    substitute ~IdentityRight(mult,-):0,0;
    substitute ~DistributeLeft:0;
    call x div(x,sub(1,a));
    substitute InverseRight:0;
} result {
    sum(i -> pow(a,i),0,n)=div(sub(1,pow(a,add(n,1))),sub(1,a))
}