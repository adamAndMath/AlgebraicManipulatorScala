import Numbers

assume Pow(Complex a, Complex b)
	b=log(a,pow(a,b))=pow(a,log(a,b));

work Inverse(Complex a) {
	let 2 log(a,a);
	substitute Pow.Identity[1->0]:1,1;
	substitute Pow[1->0]:1;
} result {
	log(a,a)=1
}

work Singularity(Complex a) {
	let 2 log(a,1);
	substitute Pow.Singularity[1->0](a):1,1;
	substitute Pow[1->0]:1;
} result {
	log(a,1)=0
}

work Distribute(Complex a, Complex b, Complex c) {
	let 2 log(a,mult(b,c));
	substitute Pow[0->2](a,-):1,1,[0|1];
	substitute Pow.Definition[1->0]:1,1;
	substitute Pow[1->0]:1;
} result {
	log(a,mult(b,c))=add(log(a,b),log(a,c))
}

work DistributeSub(Complex a, Complex b, Complex c) {
	let 2 log(a,div(b,c));
	substitute Pow[0->2](a,-):1,1,[0|1];
	substitute Pow.Division[1->0]:1,1;
	substitute Pow[1->0]:1;
} result {
	log(a,div(b,c))=sub(log(a,b),log(a,c))
}

work Mult(Complex a, Complex b, Complex p) {
	let 3 log(a,pow(b,p));
	substitute Pow[0->2](a,-):[1,1,0|2,1,0];
	substitute Pow.Combine[0->1]:[1,1|2,1];
	substitute Pow[1->0]:[1|2];
	substitute Mult.Commute[0->1]:2;
} result {
	log(a,pow(b,p))=mult(log(a,b),p)=mult(p,log(a,b))
}

work ChangeBase(Complex a, Complex b, Complex c) {
    let 2 log(a,b);
    substitute Div.Mult1[0->1](-,log(c,a)):1;
    substitute Mult.Commute[0->1]:1,0;
    substitute Mult[1->0]:1,0;
    substitute Pow[2->0]:1,0,1;
} result {
    log(a,b)=div(log(c,b),log(c,a))
}
